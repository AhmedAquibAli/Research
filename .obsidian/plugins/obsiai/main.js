/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => GeminiChatbotPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// node_modules/@google/generative-ai/dist/index.mjs
var HarmCategory;
(function(HarmCategory2) {
  HarmCategory2["HARM_CATEGORY_UNSPECIFIED"] = "HARM_CATEGORY_UNSPECIFIED";
  HarmCategory2["HARM_CATEGORY_HATE_SPEECH"] = "HARM_CATEGORY_HATE_SPEECH";
  HarmCategory2["HARM_CATEGORY_SEXUALLY_EXPLICIT"] = "HARM_CATEGORY_SEXUALLY_EXPLICIT";
  HarmCategory2["HARM_CATEGORY_HARASSMENT"] = "HARM_CATEGORY_HARASSMENT";
  HarmCategory2["HARM_CATEGORY_DANGEROUS_CONTENT"] = "HARM_CATEGORY_DANGEROUS_CONTENT";
})(HarmCategory || (HarmCategory = {}));
var HarmBlockThreshold;
(function(HarmBlockThreshold2) {
  HarmBlockThreshold2["HARM_BLOCK_THRESHOLD_UNSPECIFIED"] = "HARM_BLOCK_THRESHOLD_UNSPECIFIED";
  HarmBlockThreshold2["BLOCK_LOW_AND_ABOVE"] = "BLOCK_LOW_AND_ABOVE";
  HarmBlockThreshold2["BLOCK_MEDIUM_AND_ABOVE"] = "BLOCK_MEDIUM_AND_ABOVE";
  HarmBlockThreshold2["BLOCK_ONLY_HIGH"] = "BLOCK_ONLY_HIGH";
  HarmBlockThreshold2["BLOCK_NONE"] = "BLOCK_NONE";
})(HarmBlockThreshold || (HarmBlockThreshold = {}));
var HarmProbability;
(function(HarmProbability2) {
  HarmProbability2["HARM_PROBABILITY_UNSPECIFIED"] = "HARM_PROBABILITY_UNSPECIFIED";
  HarmProbability2["NEGLIGIBLE"] = "NEGLIGIBLE";
  HarmProbability2["LOW"] = "LOW";
  HarmProbability2["MEDIUM"] = "MEDIUM";
  HarmProbability2["HIGH"] = "HIGH";
})(HarmProbability || (HarmProbability = {}));
var BlockReason;
(function(BlockReason2) {
  BlockReason2["BLOCKED_REASON_UNSPECIFIED"] = "BLOCKED_REASON_UNSPECIFIED";
  BlockReason2["SAFETY"] = "SAFETY";
  BlockReason2["OTHER"] = "OTHER";
})(BlockReason || (BlockReason = {}));
var FinishReason;
(function(FinishReason2) {
  FinishReason2["FINISH_REASON_UNSPECIFIED"] = "FINISH_REASON_UNSPECIFIED";
  FinishReason2["STOP"] = "STOP";
  FinishReason2["MAX_TOKENS"] = "MAX_TOKENS";
  FinishReason2["SAFETY"] = "SAFETY";
  FinishReason2["RECITATION"] = "RECITATION";
  FinishReason2["OTHER"] = "OTHER";
})(FinishReason || (FinishReason = {}));
var TaskType;
(function(TaskType2) {
  TaskType2["TASK_TYPE_UNSPECIFIED"] = "TASK_TYPE_UNSPECIFIED";
  TaskType2["RETRIEVAL_QUERY"] = "RETRIEVAL_QUERY";
  TaskType2["RETRIEVAL_DOCUMENT"] = "RETRIEVAL_DOCUMENT";
  TaskType2["SEMANTIC_SIMILARITY"] = "SEMANTIC_SIMILARITY";
  TaskType2["CLASSIFICATION"] = "CLASSIFICATION";
  TaskType2["CLUSTERING"] = "CLUSTERING";
})(TaskType || (TaskType = {}));
var GoogleGenerativeAIError = class extends Error {
  constructor(message) {
    super(`[GoogleGenerativeAI Error]: ${message}`);
  }
};
var GoogleGenerativeAIResponseError = class extends GoogleGenerativeAIError {
  constructor(message, response) {
    super(message);
    this.response = response;
  }
};
var BASE_URL = "https://generativelanguage.googleapis.com";
var API_VERSION = "v1";
var PACKAGE_VERSION = "0.1.3";
var PACKAGE_LOG_HEADER = "genai-js";
var Task;
(function(Task2) {
  Task2["GENERATE_CONTENT"] = "generateContent";
  Task2["STREAM_GENERATE_CONTENT"] = "streamGenerateContent";
  Task2["COUNT_TOKENS"] = "countTokens";
  Task2["EMBED_CONTENT"] = "embedContent";
  Task2["BATCH_EMBED_CONTENTS"] = "batchEmbedContents";
})(Task || (Task = {}));
var RequestUrl = class {
  constructor(model, task, apiKey, stream) {
    this.model = model;
    this.task = task;
    this.apiKey = apiKey;
    this.stream = stream;
  }
  toString() {
    let url = `${BASE_URL}/${API_VERSION}/models/${this.model}:${this.task}`;
    if (this.stream) {
      url += "?alt=sse";
    }
    return url;
  }
};
function getClientHeaders() {
  return `${PACKAGE_LOG_HEADER}/${PACKAGE_VERSION}`;
}
async function makeRequest(url, body) {
  let response;
  try {
    response = await fetch(url.toString(), {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "x-goog-api-client": getClientHeaders(),
        "x-goog-api-key": url.apiKey
      },
      body
    });
    if (!response.ok) {
      let message = "";
      try {
        const json = await response.json();
        message = json.error.message;
        if (json.error.details) {
          message += ` ${JSON.stringify(json.error.details)}`;
        }
      } catch (e) {
      }
      throw new Error(`[${response.status} ${response.statusText}] ${message}`);
    }
  } catch (e) {
    const err = new GoogleGenerativeAIError(`Error fetching from ${url.toString()}: ${e.message}`);
    err.stack = e.stack;
    throw err;
  }
  return response;
}
function addHelpers(response) {
  response.text = () => {
    if (response.candidates && response.candidates.length > 0) {
      if (response.candidates.length > 1) {
        console.warn(`This response had ${response.candidates.length} candidates. Returning text from the first candidate only. Access response.candidates directly to use the other candidates.`);
      }
      if (hadBadFinishReason(response.candidates[0])) {
        throw new GoogleGenerativeAIResponseError(`${formatBlockErrorMessage(response)}`, response);
      }
      return getText(response);
    } else if (response.promptFeedback) {
      throw new GoogleGenerativeAIResponseError(`Text not available. ${formatBlockErrorMessage(response)}`, response);
    }
    return "";
  };
  return response;
}
function getText(response) {
  var _a, _b, _c, _d;
  if ((_d = (_c = (_b = (_a = response.candidates) === null || _a === void 0 ? void 0 : _a[0].content) === null || _b === void 0 ? void 0 : _b.parts) === null || _c === void 0 ? void 0 : _c[0]) === null || _d === void 0 ? void 0 : _d.text) {
    return response.candidates[0].content.parts[0].text;
  } else {
    return "";
  }
}
var badFinishReasons = [FinishReason.RECITATION, FinishReason.SAFETY];
function hadBadFinishReason(candidate) {
  return !!candidate.finishReason && badFinishReasons.includes(candidate.finishReason);
}
function formatBlockErrorMessage(response) {
  var _a, _b, _c;
  let message = "";
  if ((!response.candidates || response.candidates.length === 0) && response.promptFeedback) {
    message += "Response was blocked";
    if ((_a = response.promptFeedback) === null || _a === void 0 ? void 0 : _a.blockReason) {
      message += ` due to ${response.promptFeedback.blockReason}`;
    }
    if ((_b = response.promptFeedback) === null || _b === void 0 ? void 0 : _b.blockReasonMessage) {
      message += `: ${response.promptFeedback.blockReasonMessage}`;
    }
  } else if ((_c = response.candidates) === null || _c === void 0 ? void 0 : _c[0]) {
    const firstCandidate = response.candidates[0];
    if (hadBadFinishReason(firstCandidate)) {
      message += `Candidate was blocked due to ${firstCandidate.finishReason}`;
      if (firstCandidate.finishMessage) {
        message += `: ${firstCandidate.finishMessage}`;
      }
    }
  }
  return message;
}
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i;
  function verb(n) {
    if (g[n])
      i[n] = function(v) {
        return new Promise(function(a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f, v) {
    if (f(v), q.shift(), q.length)
      resume(q[0][0], q[0][1]);
  }
}
var responseLineRE = /^data\: (.*)(?:\n\n|\r\r|\r\n\r\n)/;
function processStream(response) {
  const inputStream = response.body.pipeThrough(new TextDecoderStream("utf8", { fatal: true }));
  const responseStream = getResponseStream(inputStream);
  const [stream1, stream2] = responseStream.tee();
  return {
    stream: generateResponseSequence(stream1),
    response: getResponsePromise(stream2)
  };
}
async function getResponsePromise(stream) {
  const allResponses = [];
  const reader = stream.getReader();
  while (true) {
    const { done, value } = await reader.read();
    if (done) {
      return addHelpers(aggregateResponses(allResponses));
    }
    allResponses.push(value);
  }
}
function generateResponseSequence(stream) {
  return __asyncGenerator(this, arguments, function* generateResponseSequence_1() {
    const reader = stream.getReader();
    while (true) {
      const { value, done } = yield __await(reader.read());
      if (done) {
        break;
      }
      yield yield __await(addHelpers(value));
    }
  });
}
function getResponseStream(inputStream) {
  const reader = inputStream.getReader();
  const stream = new ReadableStream({
    start(controller) {
      let currentText = "";
      return pump();
      function pump() {
        return reader.read().then(({ value, done }) => {
          if (done) {
            if (currentText.trim()) {
              controller.error(new GoogleGenerativeAIError("Failed to parse stream"));
              return;
            }
            controller.close();
            return;
          }
          currentText += value;
          let match = currentText.match(responseLineRE);
          let parsedResponse;
          while (match) {
            try {
              parsedResponse = JSON.parse(match[1]);
            } catch (e) {
              controller.error(new GoogleGenerativeAIError(`Error parsing JSON response: "${match[1]}"`));
              return;
            }
            controller.enqueue(parsedResponse);
            currentText = currentText.substring(match[0].length);
            match = currentText.match(responseLineRE);
          }
          return pump();
        });
      }
    }
  });
  return stream;
}
function aggregateResponses(responses) {
  const lastResponse = responses[responses.length - 1];
  const aggregatedResponse = {
    promptFeedback: lastResponse === null || lastResponse === void 0 ? void 0 : lastResponse.promptFeedback
  };
  for (const response of responses) {
    if (response.candidates) {
      for (const candidate of response.candidates) {
        const i = candidate.index;
        if (!aggregatedResponse.candidates) {
          aggregatedResponse.candidates = [];
        }
        if (!aggregatedResponse.candidates[i]) {
          aggregatedResponse.candidates[i] = {
            index: candidate.index
          };
        }
        aggregatedResponse.candidates[i].citationMetadata = candidate.citationMetadata;
        aggregatedResponse.candidates[i].finishReason = candidate.finishReason;
        aggregatedResponse.candidates[i].finishMessage = candidate.finishMessage;
        aggregatedResponse.candidates[i].safetyRatings = candidate.safetyRatings;
        if (candidate.content && candidate.content.parts) {
          if (!aggregatedResponse.candidates[i].content) {
            aggregatedResponse.candidates[i].content = {
              role: candidate.content.role || "user",
              parts: [{ text: "" }]
            };
          }
          for (const part of candidate.content.parts) {
            if (part.text) {
              aggregatedResponse.candidates[i].content.parts[0].text += part.text;
            }
          }
        }
      }
    }
  }
  return aggregatedResponse;
}
async function generateContentStream(apiKey, model, params) {
  const url = new RequestUrl(
    model,
    Task.STREAM_GENERATE_CONTENT,
    apiKey,
    /* stream */
    true
  );
  const response = await makeRequest(url, JSON.stringify(params));
  return processStream(response);
}
async function generateContent(apiKey, model, params) {
  const url = new RequestUrl(
    model,
    Task.GENERATE_CONTENT,
    apiKey,
    /* stream */
    false
  );
  const response = await makeRequest(url, JSON.stringify(params));
  const responseJson = await response.json();
  const enhancedResponse = addHelpers(responseJson);
  return {
    response: enhancedResponse
  };
}
function formatNewContent(request, role) {
  let newParts = [];
  if (typeof request === "string") {
    newParts = [{ text: request }];
  } else {
    for (const partOrString of request) {
      if (typeof partOrString === "string") {
        newParts.push({ text: partOrString });
      } else {
        newParts.push(partOrString);
      }
    }
  }
  return { role, parts: newParts };
}
function formatGenerateContentInput(params) {
  if (params.contents) {
    return params;
  } else {
    const content = formatNewContent(params, "user");
    return { contents: [content] };
  }
}
function formatEmbedContentInput(params) {
  if (typeof params === "string" || Array.isArray(params)) {
    const content = formatNewContent(params, "user");
    return { content };
  }
  return params;
}
var SILENT_ERROR = "SILENT_ERROR";
var ChatSession = class {
  constructor(apiKey, model, params) {
    this.model = model;
    this.params = params;
    this._history = [];
    this._sendPromise = Promise.resolve();
    this._apiKey = apiKey;
    if (params === null || params === void 0 ? void 0 : params.history) {
      this._history = params.history.map((content) => {
        if (!content.role) {
          throw new Error("Missing role for history item: " + JSON.stringify(content));
        }
        return formatNewContent(content.parts, content.role);
      });
    }
  }
  /**
   * Gets the chat history so far. Blocked prompts are not added to history.
   * Blocked candidates are not added to history, nor are the prompts that
   * generated them.
   */
  async getHistory() {
    await this._sendPromise;
    return this._history;
  }
  /**
   * Sends a chat message and receives a non-streaming
   * {@link GenerateContentResult}
   */
  async sendMessage(request) {
    var _a, _b;
    await this._sendPromise;
    const newContent = formatNewContent(request, "user");
    const generateContentRequest = {
      safetySettings: (_a = this.params) === null || _a === void 0 ? void 0 : _a.safetySettings,
      generationConfig: (_b = this.params) === null || _b === void 0 ? void 0 : _b.generationConfig,
      contents: [...this._history, newContent]
    };
    let finalResult;
    this._sendPromise = this._sendPromise.then(() => generateContent(this._apiKey, this.model, generateContentRequest)).then((result) => {
      var _a2;
      if (result.response.candidates && result.response.candidates.length > 0) {
        this._history.push(newContent);
        const responseContent = Object.assign({
          parts: [],
          // Response seems to come back without a role set.
          role: "model"
        }, (_a2 = result.response.candidates) === null || _a2 === void 0 ? void 0 : _a2[0].content);
        this._history.push(responseContent);
      } else {
        const blockErrorMessage = formatBlockErrorMessage(result.response);
        if (blockErrorMessage) {
          console.warn(`sendMessage() was unsuccessful. ${blockErrorMessage}. Inspect response object for details.`);
        }
      }
      finalResult = result;
    });
    await this._sendPromise;
    return finalResult;
  }
  /**
   * Sends a chat message and receives the response as a
   * {@link GenerateContentStreamResult} containing an iterable stream
   * and a response promise.
   */
  async sendMessageStream(request) {
    var _a, _b;
    await this._sendPromise;
    const newContent = formatNewContent(request, "user");
    const generateContentRequest = {
      safetySettings: (_a = this.params) === null || _a === void 0 ? void 0 : _a.safetySettings,
      generationConfig: (_b = this.params) === null || _b === void 0 ? void 0 : _b.generationConfig,
      contents: [...this._history, newContent]
    };
    const streamPromise = generateContentStream(this._apiKey, this.model, generateContentRequest);
    this._sendPromise = this._sendPromise.then(() => streamPromise).catch((_ignored) => {
      throw new Error(SILENT_ERROR);
    }).then((streamResult) => streamResult.response).then((response) => {
      if (response.candidates && response.candidates.length > 0) {
        this._history.push(newContent);
        const responseContent = Object.assign({}, response.candidates[0].content);
        if (!responseContent.role) {
          responseContent.role = "model";
        }
        this._history.push(responseContent);
      } else {
        const blockErrorMessage = formatBlockErrorMessage(response);
        if (blockErrorMessage) {
          console.warn(`sendMessageStream() was unsuccessful. ${blockErrorMessage}. Inspect response object for details.`);
        }
      }
    }).catch((e) => {
      if (e.message !== SILENT_ERROR) {
        console.error(e);
      }
    });
    return streamPromise;
  }
};
async function countTokens(apiKey, model, params) {
  const url = new RequestUrl(model, Task.COUNT_TOKENS, apiKey, false);
  const response = await makeRequest(url, JSON.stringify(Object.assign(Object.assign({}, params), { model })));
  return response.json();
}
async function embedContent(apiKey, model, params) {
  const url = new RequestUrl(model, Task.EMBED_CONTENT, apiKey, false);
  const response = await makeRequest(url, JSON.stringify(params));
  return response.json();
}
async function batchEmbedContents(apiKey, model, params) {
  const url = new RequestUrl(model, Task.BATCH_EMBED_CONTENTS, apiKey, false);
  const requestsWithModel = params.requests.map((request) => {
    return Object.assign(Object.assign({}, request), { model: `models/${model}` });
  });
  const response = await makeRequest(url, JSON.stringify({ requests: requestsWithModel }));
  return response.json();
}
var GenerativeModel = class {
  constructor(apiKey, modelParams) {
    var _a;
    this.apiKey = apiKey;
    if (modelParams.model.startsWith("models/")) {
      this.model = (_a = modelParams.model.split("models/")) === null || _a === void 0 ? void 0 : _a[1];
    } else {
      this.model = modelParams.model;
    }
    this.generationConfig = modelParams.generationConfig || {};
    this.safetySettings = modelParams.safetySettings || [];
  }
  /**
   * Makes a single non-streaming call to the model
   * and returns an object containing a single {@link GenerateContentResponse}.
   */
  async generateContent(request) {
    const formattedParams = formatGenerateContentInput(request);
    return generateContent(this.apiKey, this.model, Object.assign({ generationConfig: this.generationConfig, safetySettings: this.safetySettings }, formattedParams));
  }
  /**
   * Makes a single streaming call to the model
   * and returns an object containing an iterable stream that iterates
   * over all chunks in the streaming response as well as
   * a promise that returns the final aggregated response.
   */
  async generateContentStream(request) {
    const formattedParams = formatGenerateContentInput(request);
    return generateContentStream(this.apiKey, this.model, Object.assign({ generationConfig: this.generationConfig, safetySettings: this.safetySettings }, formattedParams));
  }
  /**
   * Gets a new {@link ChatSession} instance which can be used for
   * multi-turn chats.
   */
  startChat(startChatParams) {
    return new ChatSession(this.apiKey, this.model, startChatParams);
  }
  /**
   * Counts the tokens in the provided request.
   */
  async countTokens(request) {
    const formattedParams = formatGenerateContentInput(request);
    return countTokens(this.apiKey, this.model, formattedParams);
  }
  /**
   * Embeds the provided content.
   */
  async embedContent(request) {
    const formattedParams = formatEmbedContentInput(request);
    return embedContent(this.apiKey, this.model, formattedParams);
  }
  /**
   * Embeds an array of {@link EmbedContentRequest}s.
   */
  async batchEmbedContents(batchEmbedContentRequest) {
    return batchEmbedContents(this.apiKey, this.model, batchEmbedContentRequest);
  }
};
var GoogleGenerativeAI = class {
  constructor(apiKey) {
    this.apiKey = apiKey;
  }
  /**
   * Gets a {@link GenerativeModel} instance for the provided model name.
   */
  getGenerativeModel(modelParams) {
    if (!modelParams.model) {
      throw new GoogleGenerativeAIError(`Must provide a model name. Example: genai.getGenerativeModel({ model: 'my-model-name' })`);
    }
    return new GenerativeModel(this.apiKey, modelParams);
  }
};

// src/services/GeminiService.ts
var GeminiService = class {
  constructor(apiKey) {
    const genAI = new GoogleGenerativeAI(apiKey);
    this.model = genAI.getGenerativeModel({ model: "gemini-pro" });
    this.startChat();
  }
  startChat() {
    this.chat = this.model.startChat({
      history: [],
      generationConfig: {
        maxOutputTokens: 1e3
      }
    });
  }
  async sendMessage(message) {
    try {
      const result = await this.chat.sendMessage(message);
      const response = await result.response;
      return response.text();
    } catch (error) {
      console.error("Error sending message to Gemini:", error);
      throw error;
    }
  }
  async summarizeContent(content) {
    const prompt = `Please summarize the following content:

${content}`;
    return this.sendMessage(prompt);
  }
  async translateContent(content, targetLanguage) {
    const prompt = `Please translate the following content to ${targetLanguage}:

${content}`;
    return this.sendMessage(prompt);
  }
  async findActionItems(content) {
    const prompt = `Please analyze the following content and list all action items and tasks:

${content}`;
    return this.sendMessage(prompt);
  }
};

// src/modals/LanguageSelectionModal.ts
var import_obsidian = require("obsidian");
var LanguageSelectionModal = class extends import_obsidian.Modal {
  constructor(app, onChoose) {
    super(app);
    this.onChoose = onChoose;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "Select Target Language" });
    const languages = [
      "Arabic",
      "Chinese",
      "English",
      "French",
      "German",
      "Hindi",
      "Italian",
      "Japanese",
      "Korean",
      "Portuguese",
      "Russian",
      "Spanish"
    ];
    new import_obsidian.Setting(contentEl).setName("Language").addDropdown((dropdown) => {
      languages.forEach((lang) => dropdown.addOption(lang.toLowerCase(), lang));
      dropdown.onChange((value) => {
        this.result = value;
      });
    });
    new import_obsidian.Setting(contentEl).addButton((btn) => btn.setButtonText("Translate").setCta().onClick(() => {
      this.onChoose(this.result);
      this.close();
    }));
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// main.ts
var import_obsidian4 = require("obsidian");

// src/modals/FileSelectionModal.ts
var import_obsidian2 = require("obsidian");
var FileSelectionModal = class extends import_obsidian2.FuzzySuggestModal {
  constructor(app, onChoose) {
    super(app);
    this.onChoose = onChoose;
    this.setPlaceholder("Type to search for a file...");
  }
  getItems() {
    return this.app.vault.getMarkdownFiles();
  }
  getItemText(file) {
    return file.basename;
  }
  onChooseItem(file, evt) {
    this.onChoose(file);
  }
  renderSuggestion(match, el) {
    var _a, _b;
    const file = match.item;
    el.createEl("div", { text: file.basename });
    const path = el.createEl("div", { text: (_b = (_a = file.parent) == null ? void 0 : _a.path) != null ? _b : "" });
    path.addClass("suggestion-path");
  }
};

// main.ts
var DEFAULT_SETTINGS = {
  apiKey: "",
  floatingPosition: { x: 20, y: 20 },
  isDocked: false,
  chatSessions: []
};
var GeminiChatbotPlugin = class extends import_obsidian3.Plugin {
  constructor() {
    super(...arguments);
    this.geminiService = null;
    this.messagesContainer = null;
    this.inputField = null;
    this.currentFileContent = null;
    this.chatHistory = [];
    this.isFullPage = false;
    this.currentSession = null;
    this.referencedFiles = null;
    // Rate limiting and context management
    this.lastApiCall = 0;
    this.API_COOLDOWN = 1e3;
    // Prevent rapid-fire API calls
    this.MAX_CONTEXT_LENGTH = 3e4;
  }
  // Prevent token limit issues
  async onload() {
    const fontAwesomeLink = document.createElement("link");
    fontAwesomeLink.rel = "stylesheet";
    fontAwesomeLink.href = "https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css";
    document.head.appendChild(fontAwesomeLink);
    await this.loadSettings();
    if (this.settings.apiKey) {
      this.initializeGeminiService();
    }
    this.addSettingTab(new GeminiChatbotSettingTab(this.app, this));
    this.addFloatingIcon();
    this.addChatContainer();
  }
  initializeGeminiService() {
    try {
      if (this.settings.apiKey) {
        const decryptedKey = this.decryptApiKey(this.settings.apiKey);
        this.geminiService = new GeminiService(decryptedKey);
      }
    } catch (error) {
      console.error("Failed to initialize Gemini service:", error);
    }
  }
  async handleMessage(message) {
    var _a, _b;
    if (!this.geminiService || !message.trim())
      return;
    const now = Date.now();
    if (now - this.lastApiCall < this.API_COOLDOWN) {
      this.addErrorMessage("Please wait a moment before sending another message");
      return;
    }
    this.toggleSuggestedActions(false);
    let contextMessage = message;
    let context = "";
    const fileReferences = message.match(/@([^\s]+)/g);
    if (fileReferences) {
      contextMessage = message.replace(/@([^\s]+)/g, "").trim();
      for (const ref of fileReferences) {
        const fileName = ref.slice(1);
        const fileContent = (_a = this.referencedFiles) == null ? void 0 : _a.get(fileName);
        if (fileContent) {
          const truncatedContent = this.truncateContent(fileContent);
          context += `
Relevant content from ${fileName}:
${truncatedContent}
`;
        }
      }
    }
    const activeFile = this.app.workspace.getActiveFile();
    if (activeFile && !fileReferences) {
      const content = await this.app.vault.read(activeFile);
      const truncatedContent = this.truncateContent(content);
      context += `
Relevant content from current note:
${truncatedContent}
`;
    }
    const finalMessage = context ? `${context}

User question: ${contextMessage}` : contextMessage;
    const userMessage = {
      role: "user",
      content: finalMessage,
      timestamp: Date.now()
    };
    await this.addMessageToChat({
      ...userMessage,
      content: contextMessage
    });
    const typingIndicator = document.createElement("div");
    typingIndicator.addClass("typing-indicator");
    typingIndicator.innerHTML = `
			<span></span>
			<span></span>
			<span></span>
		`;
    (_b = this.messagesContainer) == null ? void 0 : _b.appendChild(typingIndicator);
    try {
      this.lastApiCall = Date.now();
      const response = await this.geminiService.sendMessage(finalMessage);
      typingIndicator.remove();
      const botMessage = {
        role: "bot",
        content: response,
        timestamp: Date.now()
      };
      await this.addMessageToChat(botMessage);
      if (this.currentSession) {
        if (this.currentSession.messages.length === 2) {
          this.currentSession.title = this.generateSessionTitle(userMessage.content);
        }
        this.settings.chatSessions = [
          this.currentSession,
          ...this.settings.chatSessions.filter((s) => {
            var _a2;
            return s.id !== ((_a2 = this.currentSession) == null ? void 0 : _a2.id);
          })
        ];
        await this.saveSettings();
      }
    } catch (error) {
      typingIndicator.remove();
      let errorMessage = "Failed to get response from Gemini";
      if (error instanceof Error) {
        if (error.message.includes("429")) {
          errorMessage = "Rate limit reached. Please wait a moment before trying again.";
        } else if (error.message.includes("quota")) {
          errorMessage = "API quota exceeded. Please try again later.";
        }
      }
      this.addErrorMessage(errorMessage);
    }
  }
  async addMessageToChat(message) {
    if (!this.messagesContainer)
      return;
    const messageEl = document.createElement("div");
    messageEl.addClass(`gemini-message-${message.role}`);
    if (message.role === "bot") {
      const copyButton = messageEl.createEl("button", {
        text: "Copy to new note",
        cls: "copy-response-button"
      });
      copyButton.addEventListener("click", async () => {
        const title = this.generateNoteTitle(message.content);
        const file = await this.app.vault.create(`${title}.md`, message.content);
        const leaf = this.app.workspace.getLeaf(false);
        await leaf.openFile(file);
        new import_obsidian3.Notice("Response copied to new note!");
      });
      await import_obsidian4.MarkdownRenderer.renderMarkdown(message.content, messageEl, "", this);
    } else {
      const visibleContent = this.stripContextFromMessage(message.content);
      messageEl.textContent = visibleContent;
    }
    this.messagesContainer.appendChild(messageEl);
    this.messagesContainer.scrollTop = this.messagesContainer.scrollHeight;
    if (this.currentSession) {
      this.currentSession.messages.push(message);
    }
  }
  // Add new method for typing animation
  async typeMessage(text, container) {
    await import_obsidian4.MarkdownRenderer.renderMarkdown(text, container, "", this);
    const elements = Array.from(container.children);
    container.empty();
    for (const element of elements) {
      if (element instanceof HTMLElement) {
        if (element.tagName === "P") {
          const text2 = element.textContent || "";
          const p = container.createEl("p");
          for (const char of text2) {
            p.textContent += char;
            await new Promise((resolve) => setTimeout(resolve, 10));
            if (this.messagesContainer) {
              this.messagesContainer.scrollTop = this.messagesContainer.scrollHeight;
            }
          }
        } else {
          container.appendChild(element);
        }
      }
    }
  }
  // Add method to strip context from messages
  stripContextFromMessage(message) {
    const userQuestionMatch = message.match(/User question: (.*?)$/m);
    if (userQuestionMatch) {
      return userQuestionMatch[1].trim();
    }
    return message;
  }
  addErrorMessage(message) {
    if (!this.messagesContainer)
      return;
    const errorEl = document.createElement("div");
    errorEl.addClass("gemini-message-error");
    errorEl.textContent = message;
    this.messagesContainer.appendChild(errorEl);
  }
  addFloatingIcon() {
    this.chatIcon = document.createElement("div");
    this.chatIcon.addClass("gemini-chat-icon");
    this.chatIcon.innerHTML = `<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
			<path d="M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z"/>
		</svg>`;
    this.chatIcon.addEventListener("click", () => {
      this.toggleChatContainer();
    });
    document.body.appendChild(this.chatIcon);
  }
  addChatContainer() {
    this.chatContainer = document.createElement("div");
    this.chatContainer.addClass("gemini-chat-container");
    this.chatContainer.style.display = "none";
    this.chatContainer.style.width = "380px";
    this.chatContainer.style.height = "590px";
    this.chatContainer.innerHTML = `
			<div class="gemini-chat-header">
				<div class="current-file"></div>
				<div class="chat-header-controls">
					<button class="history-button">
						<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
							<circle cx="12" cy="12" r="10"></circle>
							<polyline points="12 6 12 12 16 14"></polyline>
						</svg>
					</button>
					<button class="more-button">
						<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
							<rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
							<line x1="3" y1="12" x2="21" y2="12"></line>
							<line x1="12" y1="3" x2="12" y2="21"></line>
						</svg>
					</button>
					<button class="close-button">
						<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
							<line x1="18" y1="6" x2="6" y2="18"></line>
							<line x1="6" y1="6" x2="18" y2="18"></line>
						</svg>
					</button>
				</div>
			</div>
			
			<div class="bot-info">
				<div class="bot-avatar">
					<svg viewBox="0 0 1080 1080" fill="none" xmlns="http://www.w3.org/2000/svg">
						<defs>
							<filter id="filter" x="-20%" y="-20%" width="140%" height="140%" filterUnits="objectBoundingBox" primitiveUnits="userSpaceOnUse" color-interpolation-filters="linearRGB">
								<feMorphology operator="dilate" radius="20 20" in="SourceAlpha" result="morphology"/>
								<feFlood flood-color="#ffffff" flood-opacity="1" result="flood"/>
								<feComposite in="flood" in2="morphology" operator="in" result="composite"/>
								<feMerge result="merge">
									<feMergeNode in="composite" result="mergeNode"/>
									<feMergeNode in="SourceGraphic" result="mergeNode1"/>
								</feMerge>
							</filter>
						</defs>
						<g id="notion-avatar" filter="url(#filter)">
							<g id="notion-avatar-face" fill="#ffffff">
								<title>Face/ 5</title>
								<g id="Face/-5" stroke="none" stroke-width="1" fill-rule="evenodd" stroke-linecap="round" stroke-linejoin="round">
									<path d="M532,379 C664.54834,379 772,486.45166 772,619 C772,751.54834 704.54834,859 532,859 C405.842528,859 335.866563,801.559592 307.358668,718.866959 C265.336704,716.464588 232,681.625396 232,639 C232,599.134956 261.158843,566.080325 299.312086,560.00055 C325.599297,455.979213 419.809919,379 532,379 Z M295.858895,624.545187 L304.141105,655.454813" id="Path" stroke="#000000" stroke-width="24"/>
								</g>
							</g>
							<g id="notion-avatar-nose">
								<title>Nose/ 5</title>
								<g id="Nose/-5" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd" stroke-linecap="round" stroke-linejoin="round">
									<path d="M673,568 C662.55102,590.836147 657.326531,613.414126 657.326531,635.733939 C657.326531,669.213657 673,686.992054 670.061224,702.552554 C668.102041,712.92622 653.081633,714.756867 625,708.044495" id="Path" stroke="#000000" stroke-width="16"/>
								</g>
							</g>
							<g id="notion-avatar-mouth">
								<title>Mouth/ 1</title>
								<g id="Mouth/-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd" stroke-linecap="round" stroke-linejoin="round">
									<path d="M549,759 C575.12979,773.666667 603.12979,781 633,781 C662.87021,781 682.87021,773.666667 693,759" id="Path" stroke="#000000" stroke-width="16"/>
								</g>
							</g>
							<g id="notion-avatar-eyes">
								<title>Eyes/ 7</title>
								<g id="Eyes/-7" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
									<path d="M570,516 C578.836556,516 586,526.745166 586,540 C586,553.254834 578.836556,564 570,564 C561.163444,564 554,553.254834 554,540 C554,526.745166 561.163444,516 570,516 Z M708,516 C716.836556,516 724,526.745166 724,540 C724,553.254834 716.836556,564 708,564 C699.163444,564 692,553.254834 692,540 C692,526.745166 699.163444,516 708,516 Z M568,527 C564.686292,527 562,529.686292 562,533 C562,536.313708 564.686292,539 568,539 C571.313708,539 574,536.313708 574,533 C574,529.686292 571.313708,527 568,527 Z M706,527 C702.686292,527 700,529.686292 700,533 C700,536.313708 702.686292,539 706,539 C709.313708,539 712,536.313708 712,533 C712,529.686292 709.313708,527 706,527 Z" id="Combined-Shape" fill="#000000"/>
								</g>
							</g>
							<g id="notion-avatar-eyebrows">
								<title>Eyebrows/ 1</title>
								<g id="Eyebrows/-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd" stroke-linecap="square" stroke-linejoin="round">
									<g id="Group" transform="translate(521.000000, 490.000000)" stroke="#000000" stroke-width="20">
										<path d="M0,16 C12.8888889,5.33333333 27.8888889,0 45,0 C62.1111111,0 77.1111111,5.33333333 90,16" id="Path"/>
										<path d="M146,16 C158.888889,5.33333333 173.888889,0 191,0 C208.111111,0 223.111111,5.33333333 236,16" id="Path"/>
									</g>
								</g>
							</g>
							<g id="notion-avatar-hair">
								<title>Hairstyle/ 25</title>
								<g id="Hairstyle/-25" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd" stroke-linecap="round" stroke-linejoin="round">
									<path d="M227,151 C291,143 344.152059,161.487028 368.024158,212.689811 C410.238527,194.447151 459.304239,186 515,186 C629.125983,186 703.747536,236.594939 747,304 C779.083989,354 792.083989,420.666667 786,504 L782.3412,503.1612 C722.927067,489.4804 699,484 661,460 C635.666667,444 602.333333,419.666667 561,387 C524.333333,437 495.333333,470 474,486 C442,510 357,547 304,565 C251,583 232,598 232,648 C232,681.333333 258.666667,705 312,719 C325.996223,746.033167 340.996223,769.366501 357,789 C373.003777,808.633499 393.003777,825.633499 417,840 C335.666667,855.333333 262.333333,855.333333 197,840 C131.666667,824.666667 79.3333333,791 40,739 C94.6666667,735 127.666667,710.333333 139,665 C169.469054,543.123784 93,519 93,379 C93,239 147.699952,160.912506 227,151 Z" id="Path" stroke="#000000" stroke-width="12" fill="#000000"/>
								</g>
							</g>
						</g>
					</svg>
				</div>
				<div class="bot-greeting">Hello, How can I help you today?</div>
			</div>

			<div class="gemini-chat-messages"></div>

			<div class="suggested-actions">
				<h3>Suggested</h3>
				<div class="action-button">
					<span class="action-icon">\u{1F4DD}</span>
					Summarize this page
				</div>
				<div class="action-button">
					<span class="action-icon">\u{1F50D}</span>
					Ask about this page
				</div>
				<div class="action-button">
					<span class="action-icon">\u{1F4DA}</span>
					Make a quiz
				</div>
				<div class="action-button">
					<span class="action-icon">\u{1F310}</span>
					Translate to
				</div>
			</div>

			<div class="chat-input-container">
				<div class="chat-input-wrapper">
					<textarea class="chat-input" placeholder="Ask anything or select..."></textarea>
					<div class="input-actions">
						<button class="mention-button">@</button>
						<button class="send-button">\u2191</button>
					</div>
				</div>
			</div>
		`;
    document.body.appendChild(this.chatContainer);
    this.addChatEventListeners();
    const resizeHandle = document.createElement("div");
    resizeHandle.addClass("resize-handle");
    this.chatContainer.appendChild(resizeHandle);
    this.addResizeFunctionality(resizeHandle);
  }
  addChatEventListeners() {
    const closeButton = this.chatContainer.querySelector(".close-button");
    closeButton == null ? void 0 : closeButton.addEventListener("click", () => {
      this.toggleChatContainer();
    });
    const sendButton = this.chatContainer.querySelector(".send-button");
    const inputField = this.chatContainer.querySelector(".chat-input");
    this.inputField = inputField;
    this.messagesContainer = this.chatContainer.querySelector(".gemini-chat-messages");
    sendButton == null ? void 0 : sendButton.addEventListener("click", () => {
      if (this.inputField) {
        const message = this.inputField.value.trim();
        if (message) {
          this.handleMessage(message);
          this.inputField.value = "";
        }
      }
    });
    inputField == null ? void 0 : inputField.addEventListener("keydown", (e) => {
      if (e.key === "Enter" && !e.shiftKey && this.inputField) {
        e.preventDefault();
        const message = this.inputField.value.trim();
        if (message) {
          this.handleMessage(message);
          this.inputField.value = "";
        }
      }
    });
    const actionButtons = this.chatContainer.querySelectorAll(".action-button");
    actionButtons.forEach((button) => {
      button.addEventListener("click", () => {
        var _a, _b, _c, _d;
        if (!this.inputField)
          return;
        if ((_a = button.textContent) == null ? void 0 : _a.includes("Summarize")) {
          this.inputField.value = "Can you summarize this note for me?";
        } else if ((_b = button.textContent) == null ? void 0 : _b.includes("Ask about")) {
          this.inputField.value = "What is this note about?";
        } else if ((_c = button.textContent) == null ? void 0 : _c.includes("Make a quiz")) {
          this.inputField.value = "Can you create a quiz using this note?";
        } else if ((_d = button.textContent) == null ? void 0 : _d.includes("Translate")) {
          new LanguageSelectionModal(this.app, (language) => {
            if (this.inputField) {
              this.inputField.value = `Can you translate this note to ${language}?`;
            }
          }).open();
        }
        this.inputField.focus();
      });
    });
    const historyButton = this.chatContainer.querySelector(".history-button");
    historyButton == null ? void 0 : historyButton.addEventListener("click", () => {
      this.showChatHistoryView();
    });
    const moreButton = this.chatContainer.querySelector(".more-button");
    moreButton == null ? void 0 : moreButton.addEventListener("click", async () => {
      if (this.chatContainer.style.width === "380px" && this.chatContainer.style.height === "590px") {
        return;
      }
      this.chatContainer.classList.add("resetting");
      this.chatContainer.style.width = "380px";
      this.chatContainer.style.height = "590px";
      setTimeout(() => {
        this.chatContainer.classList.remove("resetting");
      }, 400);
    });
    const mentionButton = this.chatContainer.querySelector(".mention-button");
    mentionButton == null ? void 0 : mentionButton.addEventListener("click", () => {
      this.showFileSelectionModal();
    });
  }
  showLanguageSelectionModal(content) {
    new LanguageSelectionModal(this.app, (language) => {
      if (this.geminiService) {
        this.geminiService.translateContent(content, language).then((translation) => {
          this.addMessageToChat({
            role: "bot",
            content: translation,
            timestamp: Date.now()
          });
        }).catch((error) => {
          this.addErrorMessage("Translation failed");
          console.error("Translation error:", error);
        });
      }
    }).open();
  }
  async toggleChatContainer() {
    const isVisible = this.chatContainer.style.display !== "none";
    if (isVisible) {
      this.chatContainer.classList.add("closing");
      await new Promise((resolve) => setTimeout(resolve, 300));
      this.chatContainer.style.display = "none";
      this.chatContainer.classList.remove("closing");
    } else {
      this.chatContainer.style.display = "flex";
      this.currentSession = this.createNewSession();
      this.showMainChatView();
      this.toggleSuggestedActions(true);
      const activeFile = this.app.workspace.getActiveFile();
      if (activeFile) {
        this.currentFileContent = await this.app.vault.read(activeFile);
        this.updateChatHeader();
      } else {
        this.currentFileContent = null;
        this.updateChatHeader();
      }
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  onunload() {
    var _a, _b;
    const fontAwesomeLink = document.querySelector('link[href*="font-awesome"]');
    if (fontAwesomeLink) {
      fontAwesomeLink.remove();
    }
    (_a = this.chatIcon) == null ? void 0 : _a.remove();
    (_b = this.chatContainer) == null ? void 0 : _b.remove();
  }
  encryptApiKey(key) {
    return btoa(key.split("").reverse().join(""));
  }
  decryptApiKey(encryptedKey) {
    return atob(encryptedKey).split("").reverse().join("");
  }
  // Add this method to handle showing/hiding suggested actions
  toggleSuggestedActions(show) {
    const suggestedActions = this.chatContainer.querySelector(".suggested-actions");
    if (suggestedActions) {
      suggestedActions.style.display = show ? "block" : "none";
    }
  }
  updateChatHeader() {
    const activeFile = this.app.workspace.getActiveFile();
    const headerEl = this.chatContainer.querySelector(".current-file");
    if (headerEl && activeFile) {
      headerEl.textContent = activeFile.basename;
      headerEl.style.display = "block";
    } else if (headerEl) {
      headerEl.style.display = "none";
    }
  }
  // Add this method to handle full page toggle
  toggleFullPageChat() {
    this.isFullPage = !this.isFullPage;
    if (this.isFullPage) {
      this.chatContainer.addClass("full-page");
    } else {
      this.chatContainer.removeClass("full-page");
    }
  }
  // Add method to create new chat session
  createNewSession() {
    return {
      id: Date.now().toString(),
      title: "New chat",
      timestamp: Date.now(),
      messages: []
    };
  }
  // Add method to generate session title
  generateSessionTitle(firstMessage) {
    const cleanMessage = firstMessage.replace(/[#*`]/g, "").trim();
    if (cleanMessage.toLowerCase().includes("summarize")) {
      return "\u{1F4DD} Summary: " + this.extractDocumentName(cleanMessage);
    }
    if (cleanMessage.toLowerCase().includes("translate")) {
      return "\u{1F310} Translation: " + this.extractDocumentName(cleanMessage);
    }
    if (cleanMessage.toLowerCase().includes("action items") || cleanMessage.toLowerCase().includes("tasks")) {
      return "\u2705 Tasks from: " + this.extractDocumentName(cleanMessage);
    }
    if (cleanMessage.endsWith("?")) {
      return "\u2753 " + (cleanMessage.length > 40 ? cleanMessage.substring(0, 40) + "..." : cleanMessage);
    }
    const keywords = this.extractKeywords(cleanMessage);
    if (keywords) {
      return "\u{1F4AD} Chat about " + keywords;
    }
    return "\u{1F4AC} Chat from " + new Date().toLocaleTimeString([], {
      hour: "2-digit",
      minute: "2-digit"
    });
  }
  extractDocumentName(message) {
    const lines = message.split("\n");
    if (lines.length > 1) {
      for (let i = 1; i < lines.length; i++) {
        const line = lines[i].trim();
        if (line) {
          return line.length > 30 ? line.substring(0, 30) + "..." : line;
        }
      }
    }
    return "Document";
  }
  extractKeywords(message) {
    const commonWords = /* @__PURE__ */ new Set([
      "the",
      "be",
      "to",
      "of",
      "and",
      "a",
      "in",
      "that",
      "have",
      "i",
      "it",
      "for",
      "not",
      "on",
      "with",
      "he",
      "as",
      "you",
      "do",
      "at",
      "this",
      "but",
      "his",
      "by",
      "from",
      "they",
      "we",
      "say",
      "her",
      "she",
      "or",
      "an",
      "will",
      "my",
      "one",
      "all",
      "would",
      "there",
      "their",
      "what",
      "so",
      "up",
      "out",
      "if",
      "about",
      "who",
      "get",
      "which",
      "go",
      "me",
      "please",
      "could",
      "can",
      "just"
    ]);
    const words = message.toLowerCase().replace(/[^\w\s]/g, "").split(/\s+/).filter((word) => !commonWords.has(word) && word.length > 2).slice(0, 3);
    if (words.length > 0) {
      const formattedWords = words.map((word) => word.charAt(0).toUpperCase() + word.slice(1));
      return formattedWords.join(", ");
    }
    return "";
  }
  // Update showChatHistoryView method
  showChatHistoryView() {
    if (!this.chatContainer)
      return;
    const elementsToHide = [
      ".bot-info",
      ".suggested-actions",
      ".chat-input-container",
      ".gemini-chat-messages"
    ];
    elementsToHide.forEach((selector) => {
      const el = this.chatContainer.querySelector(selector);
      if (el)
        el.style.display = "none";
    });
    const existingHistoryView = this.chatContainer.querySelector(".chat-history-view");
    if (existingHistoryView) {
      existingHistoryView.classList.add("closing");
      setTimeout(() => {
        existingHistoryView.remove();
      }, 300);
      return;
    }
    const historyView = document.createElement("div");
    historyView.addClass("chat-history-view");
    historyView.innerHTML = `
			<div class="chat-history-header">
				<div class="back-button">
					<svg width="16" height="16" viewBox="0 0 24 24">
						<path fill="currentColor" d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z"/>
					</svg>
				</div>
				<h2>All chats</h2>
				<div class="new-chat-button">New chat</div>
			</div>
			<div class="chat-history-search">
				<input type="text" placeholder="Search or start new chat">
			</div>
			<div class="chat-history-sections">
				${this.renderChatHistorySections()}
			</div>
		`;
    this.chatContainer.appendChild(historyView);
    const backBtn = historyView.querySelector(".back-button");
    backBtn == null ? void 0 : backBtn.addEventListener("click", () => {
      historyView.classList.add("closing");
      setTimeout(() => {
        historyView.remove();
        this.showMainChatView();
      }, 300);
    });
    const newChatBtn = historyView.querySelector(".new-chat-button");
    newChatBtn == null ? void 0 : newChatBtn.addEventListener("click", () => {
      this.currentSession = this.createNewSession();
      historyView.remove();
      this.showMainChatView();
    });
    this.attachHistoryItemListeners(historyView);
    const searchInput = historyView.querySelector("input");
    searchInput == null ? void 0 : searchInput.addEventListener("input", (e) => {
      const query = e.target.value;
      this.filterChatHistory(query);
    });
  }
  // Update renderHistorySection to include delete button
  renderHistorySection(title, sessions) {
    if (sessions.length === 0)
      return "";
    return `
			<div class="history-section">
				<h3>${title}</h3>
				${sessions.map(
      (session) => `
					<div class="history-item" data-session-id="${session.id}">
						<div class="history-item-icon">\u{1F4AC}</div>
						<div class="history-item-content">
							<div class="history-item-title">${session.title}</div>
							<div class="history-item-time">${this.formatTime(session.timestamp)}</div>
						</div>
						<div class="delete-chat" data-session-id="${session.id}">
							<svg width="14" height="14" viewBox="0 0 24 24">
								<path fill="currentColor" d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zm2.46-7.12l1.41-1.41L12 12.59l2.12-2.12 1.41 1.41L13.41 14l2.12 2.12-1.41 1.41L12 15.41l-2.12 2.12-1.41-1.41L10.59 14l-2.13-2.12zM15.5 4l-1-1h-5l-1 1H5v2h14V4z"/>
							</svg>
						</div>
					</div>
				`
    ).join("")}
			</div>
		`;
  }
  // Add method to handle chat deletion
  deleteChat(sessionId) {
    const historyItem = this.chatContainer.querySelector(
      `.history-item[data-session-id="${sessionId}"]`
    );
    if (historyItem) {
      historyItem.classList.add("deleting");
      setTimeout(() => {
        this.settings.chatSessions = this.settings.chatSessions.filter((s) => s.id !== sessionId);
        this.saveSettings();
        historyItem.remove();
        const sectionsContainer = this.chatContainer.querySelector(".chat-history-sections");
        if (sectionsContainer) {
          sectionsContainer.innerHTML = this.renderChatHistorySections();
          this.attachHistoryItemListeners(sectionsContainer);
        }
      }, 300);
    }
  }
  // Add method to attach event listeners to history items
  attachHistoryItemListeners(historyView) {
    const deleteButtons = historyView.querySelectorAll(".delete-chat");
    deleteButtons.forEach((btn) => {
      btn.addEventListener("click", (e) => {
        e.stopPropagation();
        const sessionId = btn.getAttribute("data-session-id");
        if (sessionId) {
          this.deleteChat(sessionId);
        }
      });
    });
    const historyItems = historyView.querySelectorAll(".history-item");
    historyItems.forEach((item) => {
      item.addEventListener("click", () => {
        const sessionId = item.getAttribute("data-session-id");
        const session = this.settings.chatSessions.find((s) => s.id === sessionId);
        if (session) {
          this.currentSession = { ...session };
          this.showMainChatView();
          historyView.remove();
        }
      });
    });
  }
  // Add method to render chat history sections
  renderChatHistorySections() {
    const now = Date.now();
    const dayInMs = 24 * 60 * 60 * 1e3;
    const thirtyDaysAgo = now - 30 * dayInMs;
    const today = [];
    const past30Days = [];
    const older = [];
    this.settings.chatSessions.forEach((session) => {
      if (session.timestamp > now - dayInMs) {
        today.push(session);
      } else if (session.timestamp > thirtyDaysAgo) {
        past30Days.push(session);
      } else {
        older.push(session);
      }
    });
    return `
			${this.renderHistorySection("Today", today)}
			${this.renderHistorySection("Past 30 days", past30Days)}
			${this.renderHistorySection("Older", older)}
		`;
  }
  // Add method to format timestamp
  formatTime(timestamp) {
    const date = new Date(timestamp);
    const now = new Date();
    if (date.toDateString() === now.toDateString()) {
      return date.toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" });
    }
    return date.toLocaleDateString();
  }
  // Update filterChatHistory method to fix search
  filterChatHistory(query) {
    const historyView = this.chatContainer.querySelector(".chat-history-view");
    if (!historyView)
      return;
    const items = historyView.querySelectorAll(".history-item");
    items.forEach((item) => {
      var _a, _b;
      const title = ((_b = (_a = item.querySelector(".history-item-title")) == null ? void 0 : _a.textContent) == null ? void 0 : _b.toLowerCase()) || "";
      if (title.includes(query.toLowerCase())) {
        ;
        item.style.display = "flex";
      } else {
        ;
        item.style.display = "none";
      }
    });
  }
  // Update showMainChatView method
  showMainChatView() {
    const elementsToShow = [".bot-info", ".chat-input-container", ".gemini-chat-messages"];
    elementsToShow.forEach((selector) => {
      const el = this.chatContainer.querySelector(selector);
      if (el)
        el.style.display = selector === ".gemini-chat-messages" ? "flex" : "block";
    });
    if (this.messagesContainer) {
      this.messagesContainer.innerHTML = "";
      if (this.currentSession) {
        this.currentSession.messages.forEach((message) => this.addMessageToChat(message));
        this.toggleSuggestedActions(false);
      } else {
        this.toggleSuggestedActions(true);
      }
    }
  }
  // Add this method to handle file selection
  async showFileSelectionModal() {
    const files = this.app.vault.getMarkdownFiles();
    const modal = new FileSelectionModal(this.app, async (file) => {
      if (file && this.inputField) {
        const content = await this.app.vault.read(file);
        const cursorPos = this.inputField.selectionStart;
        const currentValue = this.inputField.value;
        const newValue = currentValue.slice(0, cursorPos) + `@${file.basename} ` + currentValue.slice(cursorPos);
        this.inputField.value = newValue;
        this.referencedFiles = this.referencedFiles || /* @__PURE__ */ new Map();
        this.referencedFiles.set(file.basename, content);
        this.inputField.focus();
      }
    });
    modal.open();
  }
  // Add method to truncate content intelligently
  truncateContent(content) {
    if (content.length <= this.MAX_CONTEXT_LENGTH) {
      return content;
    }
    const relevantPart = content.slice(0, this.MAX_CONTEXT_LENGTH);
    const lastParagraph = relevantPart.lastIndexOf("\n\n");
    if (lastParagraph !== -1) {
      return relevantPart.slice(0, lastParagraph) + "\n\n[Content truncated for length...]";
    }
    return relevantPart + "[Content truncated for length...]";
  }
  // Add this method to format the bot's response
  async formatBotResponse(container, content) {
    const headerDiv = container.createDiv("response-header");
    const copyButton = headerDiv.createEl("button", {
      text: "Copy to new note",
      cls: "copy-response-button"
    });
    copyButton.addEventListener("click", async () => {
      const fileName = `AI Response ${new Date().toLocaleString().replace(/[/:\\]/g, "-")}`;
      const file = await this.app.vault.create(`${fileName}.md`, content);
      const leaf = this.app.workspace.getLeaf(false);
      await leaf.openFile(file);
      new import_obsidian3.Notice("Response copied to new note!");
    });
    const contentDiv = container.createDiv("response-content");
    await import_obsidian4.MarkdownRenderer.renderMarkdown(content, contentDiv, "", this);
  }
  // Add method to generate creative titles
  generateNoteTitle(content) {
    const isQuiz = content.toLowerCase().includes("quiz") || content.toLowerCase().includes("question");
    const isSummary = content.toLowerCase().includes("summary") || content.toLowerCase().includes("summarize");
    const isTranslation = content.toLowerCase().includes("translation") || content.toLowerCase().includes("translated");
    const activeFile = this.app.workspace.getActiveFile();
    const fileName = activeFile ? activeFile.basename : "";
    let title = "";
    if (isQuiz) {
      title = `Quiz - ${fileName}`;
    } else if (isSummary) {
      title = `Summary - ${fileName}`;
    } else if (isTranslation) {
      const langMatch = content.match(/translated? to (\w+)/i);
      const language = langMatch ? langMatch[1] : "Other Language";
      title = `${language} Translation - ${fileName}`;
    } else {
      const headingMatch = content.match(/^#\s+(.+)$/m);
      if (headingMatch) {
        title = `${headingMatch[1].trim()} - ${fileName}`;
      } else {
        const firstLine = content.split("\n")[0].trim();
        if (firstLine && firstLine.length < 50) {
          title = `${firstLine} - ${fileName}`;
        } else {
          const now = new Date();
          title = `AI Response ${now.toLocaleString("en-US", {
            month: "short",
            day: "numeric",
            hour: "numeric",
            minute: "2-digit"
          })}`;
        }
      }
    }
    return title.replace(/[\\/:*?"<>|]/g, "-");
  }
  addResizeFunctionality(handle) {
    let isResizing = false;
    let startWidth;
    let startHeight;
    let startX;
    let startY;
    let startBottom;
    let startRight;
    handle.addEventListener("mousedown", (e) => {
      isResizing = true;
      startWidth = this.chatContainer.offsetWidth;
      startHeight = this.chatContainer.offsetHeight;
      startX = e.clientX;
      startY = e.clientY;
      const rect = this.chatContainer.getBoundingClientRect();
      startBottom = window.innerHeight - rect.bottom;
      startRight = window.innerWidth - rect.right;
      document.addEventListener("mousemove", handleMouseMove);
      document.addEventListener("mouseup", stopResize);
      e.preventDefault();
    });
    const handleMouseMove = (e) => {
      if (!isResizing)
        return;
      const deltaX = startX - e.clientX;
      const deltaY = startY - e.clientY;
      const newWidth = Math.min(
        Math.max(startWidth + deltaX, 380),
        // Minimum width: 380px
        800
        // Maximum width: 800px
      );
      const newHeight = Math.min(
        Math.max(startHeight + deltaY, 500),
        // Minimum height: 500px
        800
        // Maximum height: 800px
      );
      this.chatContainer.style.width = `${newWidth}px`;
      this.chatContainer.style.height = `${newHeight}px`;
      this.chatContainer.style.bottom = `${startBottom}px`;
      this.chatContainer.style.right = `${startRight}px`;
    };
    const stopResize = () => {
      isResizing = false;
      document.removeEventListener("mousemove", handleMouseMove);
      document.removeEventListener("mouseup", stopResize);
    };
  }
};
var GeminiChatbotSettingTab = class extends import_obsidian3.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian3.Setting(containerEl).setName("Gemini API Key").setDesc("Enter your Gemini API key (stored securely)").addText((text) => {
      text.inputEl.type = "password";
      text.setPlaceholder("Enter your API key").setValue(this.plugin.settings.apiKey ? "\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022" : "").onChange(async (value) => {
        if (value !== "\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022") {
          this.plugin.settings.apiKey = this.plugin.encryptApiKey(value);
          await this.plugin.saveSettings();
          this.plugin.initializeGeminiService();
        }
      });
      const toggleButton = text.inputEl.createEl("button", {
        text: "\uFE0F",
        cls: "password-toggle"
      });
      toggleButton.style.position = "absolute";
      toggleButton.style.right = "5px";
      toggleButton.style.top = "50%";
      toggleButton.style.transform = "translateY(-50%)";
      toggleButton.style.background = "transparent";
      toggleButton.style.border = "none";
      toggleButton.style.cursor = "pointer";
      toggleButton.addEventListener("click", (e) => {
        e.preventDefault();
        text.inputEl.type = text.inputEl.type === "password" ? "text" : "password";
      });
    });
  }
};
/*! Bundled license information:

@google/generative-ai/dist/index.mjs:
  (**
   * @license
   * Copyright 2023 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)

@google/generative-ai/dist/index.mjs:
  (**
   * @license
   * Copyright 2023 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
*/
//# sourceMappingURL=data:application/json;base64,
